import React, { useState } from 'react'; // React hooks ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i
import { Modal, Card, Descriptions, Typography, Divider, Space, Radio, Checkbox, Select, Button } from 'antd'; // C√°c component Ant Design cho UI
// import QRCode from 'qrcode.react'; // ƒê√£ comment v√¨ th∆∞ vi·ªán QRCode ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t, thay th·∫ø b·∫±ng QR code th·ª±c khi c√≥

const { Text, Title } = Typography;

const PaymentCard = ({ 
  visible, 
  onClose, 
  sessionData, 
  onConfirm 
}) => {
  // useState hooks ƒë·ªÉ qu·∫£n l√Ω l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng: ph∆∞∆°ng th·ª©c thanh to√°n, s·ª≠ d·ª•ng g√≥i, v√† g√≥i ƒë√£ ch·ªçn
  // L√Ω do: Tr·∫°ng th√°i c·ª•c b·ªô ƒë·ªÉ x·ª≠ l√Ω ƒë·∫ßu v√†o form m√† kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn component cha
  // ƒê·ªÅ xu·∫•t: Tr√≠ch xu·∫•t th√†nh custom hook nh∆∞ usePaymentFormState ƒë·ªÉ t√°i s·ª≠ d·ª•ng
  const [paymentMethod, setPaymentMethod] = useState('cash');
  const [usePackage, setUsePackage] = useState(false);
  const [selectedPackage, setSelectedPackage] = useState(null);

  // Gi·∫£m gi√° g√≥i tƒ©nh - khi t√≠ch h·ª£p API, fetch t·ª´ API b·∫±ng useEffect
  // Thay ƒë·ªïi API: Thay th·∫ø b·∫±ng tr·∫°ng th√°i fetch t·ª´ API, v√≠ d·ª•: const [packageDiscounts, setPackageDiscounts] = useState([]);
  const packageDiscounts = {
    basic: { name: 'G√≥i c∆° b·∫£n (Basic)', discount: 0 },
    member: { name: 'G√≥i th√†nh vi√™n (Member)', discount: 0.05 },
    business: { name: 'G√≥i doanh nghi·ªáp (Business)', discount: 0.10 }
  };

  // H√†m calculateTotal - h√†m thu·∫ßn t√∫y ƒë·ªÉ t√≠nh t·ªïng d·ª±a tr√™n l·ª±a ch·ªçn
  // L√Ω do: Gi·ªØ logic t√≠nh to√°n ri√™ng bi·ªát v√† c√≥ th·ªÉ test ƒë∆∞·ª£c
  // Kh√¥ng c·∫ßn thay ƒë·ªïi cho API, v√¨ s·ª≠ d·ª•ng d·ªØ li·ªáu c·ª•c b·ªô
  const calculateTotal = () => {
    let total = sessionData.basePrice;
    if (usePackage && selectedPackage) {
      const discount = packageDiscounts[selectedPackage].discount;
      total = total * (1 - discount);
    }
    return total;
  };

  // handleConfirm - chu·∫©n b·ªã d·ªØ li·ªáu thanh to√°n v√† g·ªçi onConfirm prop
  // L√Ω do: ƒê·ªÉ ƒë√≥ng g√≥i logic chu·∫©n b·ªã d·ªØ li·ªáu
  // Thay ƒë·ªïi API: N·∫øu c·∫ßn validation, th√™m g·ªçi API ·ªü ƒë√¢y tr∆∞·ªõc khi g·ªçi onConfirm
  const handleConfirm = () => {
    const paymentData = {
      paymentMethod,
      usePackage,
      selectedPackage,
      packageInfo: selectedPackage ? packageDiscounts[selectedPackage] : null,
      totalAmount: calculateTotal()
    };
    onConfirm(paymentData);
  };

  return (
    <Modal
      open={visible}
      onCancel={onClose}
      footer={null}
      width={600}
      centered
    > {/* Modal t·ª´ Antd cho popup UI, centered ƒë·ªÉ UX t·ªët h∆°n */}
      <Card title="üí≥ Thanh to√°n phi√™n s·∫°c" variant="borderless"> {/* Card cho n·ªôi dung c√≥ c·∫•u tr√∫c, variant="borderless" ƒë·ªÉ b·ªè vi·ªÅn */}
        <Descriptions column={1} size="small" style={{ marginBottom: '24px' }}> {/* Descriptions ƒë·ªÉ hi·ªÉn th·ªã key-value c·ªßa d·ªØ li·ªáu phi√™n */}
          <Descriptions.Item label="T√™n tr·∫°m s·∫°c">{sessionData.stationName}</Descriptions.Item>
          <Descriptions.Item label="M√£ phi√™n s·∫°c">{sessionData.sessionId}</Descriptions.Item>
          <Descriptions.Item label="Th·ªùi gian s·∫°c">{sessionData.duration}</Descriptions.Item>
          <Descriptions.Item label="ƒêi·ªán nƒÉng ti√™u th·ª•">{sessionData.energyConsumed} kWh</Descriptions.Item>
          <Descriptions.Item label="T·ªïng ti·ªÅn t·∫°m t√≠nh">
            <Text strong style={{ fontSize: '16px', color: '#ff4d4f' }}>
              {calculateTotal().toLocaleString('vi-VN')} VNƒê
            </Text>
          </Descriptions.Item>
        </Descriptions>

        <Divider /> {/* Divider ƒë·ªÉ ph√¢n t√°ch ph·∫ßn */}

        {/* L·ª±a ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n */}
        <Space direction="vertical" style={{ width: '100%' }} size="large">
          <div>
            <Title level={5}>Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</Title>
            <Radio.Group 
              value={paymentMethod} 
              onChange={(e) => setPaymentMethod(e.target.value)}
              style={{ width: '100%' }}
            > {/* Radio.Group cho l·ª±a ch·ªçn ƒë∆°n ph∆∞∆°ng th·ª©c thanh to√°n */}
              <Space direction="vertical" style={{ width: '100%' }}>
                <Radio value="cash">üíµ Ti·ªÅn m·∫∑t</Radio>
                <Radio value="transfer">üí≥ Chuy·ªÉn kho·∫£n</Radio>
              </Space>
            </Radio.Group>

            {paymentMethod === 'transfer' && (
              <div style={{ marginTop: '16px', textAlign: 'center', padding: '16px', backgroundColor: '#f5f5f5', borderRadius: '8px' }}>
                {/* Placeholder cho QR code - khi API, t·∫°o QR d·ª±a tr√™n d·ªØ li·ªáu thanh to√°n */}
                <div style={{ width: '180px', height: '180px', backgroundColor: '#ddd', display: 'inline-block', lineHeight: '180px' }}>
                  QR Code Placeholder
                </div>
                <Text style={{ display: 'block', marginTop: '12px' }}>
                  Qu√©t m√£ QR ƒë·ªÉ thanh to√°n
                </Text>
              </div>
            )}

            {paymentMethod === 'cash' && (
              <div style={{ marginTop: '16px', padding: '12px', backgroundColor: '#fffbe6', border: '1px solid #ffe58f', borderRadius: '8px' }}>
                <Text>‚ÑπÔ∏è Vui l√≤ng thanh to√°n tr·ª±c ti·∫øp cho nh√¢n vi√™n tr·∫°m.</Text>
              </div>
            )}
          </div>

          {/* L·ª±a ch·ªçn g√≥i */}
          <div>
            <Checkbox 
              checked={usePackage} 
              onChange={(e) => {
                setUsePackage(e.target.checked);
                if (!e.target.checked) setSelectedPackage(null);
              }}
            > {/* Checkbox cho s·ª≠ d·ª•ng g√≥i t√πy ch·ªçn */}
              S·ª≠ d·ª•ng g√≥i d·ªãch v·ª•
            </Checkbox>

            {usePackage && (
              <Select
                placeholder="Ch·ªçn g√≥i d·ªãch v·ª•"
                style={{ width: '100%', marginTop: '12px' }}
                value={selectedPackage}
                onChange={setSelectedPackage}
              > {/* Select cho l·ª±a ch·ªçn g√≥i */}
                <Select.Option value="basic">G√≥i c∆° b·∫£n (Basic)</Select.Option>
                <Select.Option value="member">G√≥i th√†nh vi√™n (Member) ‚Äì gi·∫£m 5%</Select.Option>
                <Select.Option value="business">G√≥i doanh nghi·ªáp (Business) ‚Äì gi·∫£m 10%</Select.Option>
              </Select>
            )}
          </div>
        </Space>

        <Divider />

        {/* N√∫t h√†nh ƒë·ªông */}
        <Space style={{ width: '100%', justifyContent: 'flex-end' }}>
          <Button onClick={onClose}> {/* N√∫t h·ªßy */}
            H·ªßy
          </Button>
          <Button type="primary" onClick={handleConfirm}> {/* N√∫t ch√≠nh x√°c nh·∫≠n */}
            X√°c nh·∫≠n thanh to√°n
          </Button>
        </Space>
      </Card>
    </Modal>
  );
};

export default PaymentCard;
