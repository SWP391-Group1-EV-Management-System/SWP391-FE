import React from "react";
import { Card, Typography, Space, Tag, Progress, Button } from "antd";
import { ClockCircleOutlined, TeamOutlined, CarOutlined } from "@ant-design/icons";
import "../../assets/styles/WaitingQueue.css";

const { Title, Text } = Typography;

const WaitingQueue = ({
  queuePosition = 3,
  estimatedWaitTime = 45, // ph√∫t
  totalInQueue = 8,
  averageSessionTime = 30, // ph√∫t
  currentSessionRemaining = 15, // ph√∫t
  onCancel = null, // Callback khi h·ªßy h√†ng ch·ªù
}) => {
  // T√≠nh to√°n th·ªùi gian ∆∞·ªõc t√≠nh
  const calculateEstimatedTime = () => {
    const currentSessionTime = currentSessionRemaining;
    const waitingTime = (queuePosition - 1) * averageSessionTime;
    return currentSessionTime + waitingTime;
  };

  // Format th·ªùi gian th√†nh gi·ªù:ph√∫t
  const formatTime = (minutes) => {
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    if (hours > 0) {
      return `${hours}h ${mins}m`;
    }
    return `${mins} ph√∫t`;
  };

  // T√≠nh progress based on position
  const progressPercent = Math.round(((totalInQueue - queuePosition + 1) / totalInQueue) * 100);

  // X√°c ƒë·ªãnh m√†u s·∫Øc d·ª±a tr√™n th·ªùi gian ch·ªù
  const getColorByWaitTime = () => {
    if (estimatedWaitTime <= 30) return "#52c41a"; // Xanh - √≠t ch·ªù
    if (estimatedWaitTime <= 60) return "#faad14"; // Cam - ch·ªù v·ª´a
    return "#ff4d4f"; // ƒê·ªè - ch·ªù l√¢u
  };

  const estimatedTotal = calculateEstimatedTime();

  return (
    <Card className="waiting-queue-container">
      <div>
        {/* Header */}
        <div className="waiting-queue-header">
          <TeamOutlined className="waiting-queue-icon" />
          <Title level={4} className="waiting-queue-title">
            H√†ng ch·ªù
          </Title>
        </div>

        {/* Queue Position & Estimated Time */}
        <div className="queue-position-display">
          <div className="position-time-row">
            <div className="queue-number">
              #{queuePosition}
            </div>
            {queuePosition === 1 && (
              <div className="estimated-time-display">
                <Text className="time-value-large" style={{ color: getColorByWaitTime() }}>
                  {formatTime(estimatedTotal)}
                </Text>
                <Text className="time-label">
                  th·ªùi gian ∆∞·ªõc t√≠nh
                </Text>
              </div>
            )}
          </div>
        </div>

        {/* Progress Bar for Time */}
        <div className="progress-container">
          <Progress
            percent={Math.round((currentSessionRemaining / (currentSessionRemaining + (queuePosition - 1) * averageSessionTime)) * 100)}
            strokeColor={getColorByWaitTime()}
            showInfo={false}
          />
        </div>

        {/* N√∫t ƒëi·ªÅu khi·ªÉn */}
        <div className="controls-container">
          <Button 
            danger
            type="primary"
            onClick={() => {
              if (onCancel) {
                onCancel();
              }
            }}
          >
            H·ªßy h√†ng ch·ªù
          </Button>
        </div>

        {/* Tips */}
        <div className="queue-tips">
          <Text className="tips-text">
            üí° Th·ªùi gian ∆∞·ªõc t√≠nh c√≥ th·ªÉ thay ƒë·ªïi t√πy thu·ªôc v√†o t√¨nh h√¨nh th·ª±c t·∫ø
          </Text>
        </div>
      </div>
    </Card>
  );
};

export default WaitingQueue;