/**
 * ENERGY STATS COMPONENT
 *
 * Component hi·ªÉn th·ªã c√°c th·ªëng k√™ nƒÉng l∆∞·ª£ng v√† th·ªùi gian c·ªßa phi√™n s·∫°c
 * Bao g·ªìm 2 th·∫ª ch√≠nh:
 * 1. NƒÉng l∆∞·ª£ng ƒë√£ s·∫°c (kWh) - Gi√° tr·ªã tƒ©nh t·ª´ backend
 * 2. Th·ªùi gian ƒë√£ s·∫°c - C·∫≠p nh·∫≠t realtime m·ªói gi√¢y
 */

import React, { useEffect, useState } from "react";
import { Card, Row, Col, Statistic, Space } from "antd";
import { ThunderboltOutlined, ClockCircleOutlined } from "@ant-design/icons";

/**
 * Component ch√≠nh hi·ªÉn th·ªã c√°c th√¥ng s·ªë nƒÉng l∆∞·ª£ng/th·ªùi gian c·ªßa phi√™n s·∫°c
 * Layout: 2 c·ªôt responsive
 * - Mobile (xs): 24/24 - m·ªói card chi·∫øm full width
 * - Tablet (sm): 12/24 - m·ªói card chi·∫øm 50% width
 * - Desktop (md+): 12/24 - m·ªói card chi·∫øm 50% width
 */
const EnergyStats = ({ sessionData }) => {
  return (
    <Row gutter={[16, 16]}>
      {/* Gutter: kho·∫£ng c√°ch gi·ªØa c√°c c·ªôt l√† 16px (horizontal v√† vertical) */}

      {/* ==================== CARD 1: NƒÇNG L∆Ø·ª¢NG ƒê√É S·∫†C ==================== */}
      <Col xs={24} sm={12} md={12}>
        {/* Responsive columns:
            - xs={24}: Mobile - chi·∫øm full width (24/24 columns)
            - sm={12}: Tablet - chi·∫øm 50% width (12/24 columns)
            - md={12}: Desktop - chi·∫øm 50% width (12/24 columns)
        */}
        <Card
          style={{
            borderRadius: "16px", // Bo tr√≤n g√≥c card
            border: "1px solid #e5e7eb", // Vi·ªÅn x√°m nh·∫°t
            boxShadow: "0 4px 16px rgba(0, 0, 0, 0.04)", // Shadow nh·∫π ƒë·ªÉ t·∫°o ƒë·ªô n·ªïi
            textAlign: "center", // CƒÉn gi·ªØa n·ªôi dung
            height: "100%", // Chi·ªÅu cao 100% ƒë·ªÉ 2 cards c√≥ chi·ªÅu cao b·∫±ng nhau
          }}
          styles={{
            body: { padding: "24px" }, // Padding b√™n trong card body
          }}
        >
          <Space direction="vertical" size="small" style={{ width: "100%" }}>
            {/* Space: component Ant Design ƒë·ªÉ t·∫°o kho·∫£ng c√°ch ƒë·ªÅu gi·ªØa c√°c elements
                - direction="vertical": x·∫øp d·ªçc
                - size="small": kho·∫£ng c√°ch nh·ªè gi·ªØa c√°c item
                - width: 100% ƒë·ªÉ c√°c item b√™n trong chi·∫øm full width
            */}

            {/* Icon s√©t (‚ö°) - bi·ªÉu t∆∞·ª£ng cho nƒÉng l∆∞·ª£ng/ƒëi·ªán */}
            <ThunderboltOutlined
              style={{
                fontSize: "32px", // K√≠ch th∆∞·ªõc icon l·ªõn
                color: "#10b981", // M√†u xanh l√° (emerald-500)
                marginBottom: "8px", // Kho·∫£ng c√°ch v·ªõi ph·∫ßn d∆∞·ªõi
              }}
            />

            {/* Statistic component c·ªßa Ant Design ƒë·ªÉ hi·ªÉn th·ªã s·ªë li·ªáu
                - title: nh√£n "NƒÉng l∆∞·ª£ng ƒë√£ s·∫°c"
                - value: gi√° tr·ªã t·ª´ sessionData.energyCharged
                - suffix: ƒë∆°n v·ªã "kWh" hi·ªÉn th·ªã sau s·ªë
                - valueStyle: custom style cho s·ªë (to, ƒë·∫≠m, m√†u ƒëen)
            */}
            <Statistic
              title="NƒÉng l∆∞·ª£ng ƒë√£ s·∫°c"
              value={sessionData.energyCharged} // L·∫•y t·ª´ backend, v√≠ d·ª•: "15.5" ho·∫∑c "0"
              suffix="kWh" // ƒê∆°n v·ªã kilowatt-gi·ªù
              valueStyle={{
                fontSize: "36px", // S·ªë r·∫•t l·ªõn ƒë·ªÉ d·ªÖ ƒë·ªçc
                fontWeight: 700, // Font ƒë·∫≠m (bold)
                color: "#1a1a1a", // M√†u ƒëen g·∫ßn nh∆∞ thu·∫ßn
              }}
            />
          </Space>
        </Card>
      </Col>

      {/* ==================== CARD 2: TH·ªúI GIAN ƒê√É S·∫†C ==================== */}
      <Col xs={24} sm={12} md={12}>
        {/* C·∫•u tr√∫c responsive gi·ªëng Card 1 */}
        <Card
          style={{
            borderRadius: "16px",
            border: "1px solid #e5e7eb",
            boxShadow: "0 4px 16px rgba(0, 0, 0, 0.04)",
            textAlign: "center",
            height: "100%",
          }}
          styles={{
            body: { padding: "24px" },
          }}
        >
          <Space direction="vertical" size="small" style={{ width: "100%" }}>
            {/* Icon ƒë·ªìng h·ªì (üïê) - bi·ªÉu t∆∞·ª£ng cho th·ªùi gian */}
            <ClockCircleOutlined
              style={{
                fontSize: "32px",
                color: "#10b981", // C√πng m√†u v·ªõi card nƒÉng l∆∞·ª£ng ƒë·ªÉ ƒë·ªìng b·ªô
                marginBottom: "8px",
              }}
            />

            {/* Component con ƒë·ªÉ x·ª≠ l√Ω hi·ªÉn th·ªã th·ªùi gian realtime
                - T√°ch ra component ri√™ng v√¨ logic ph·ª©c t·∫°p (c√≥ timer)
                - Component n√†y s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t m·ªói gi√¢y
            */}
            <RealtimeElapsedTime sessionData={sessionData} />
          </Space>
        </Card>
      </Col>
    </Row>
  );
};

export default EnergyStats;

/**
 * REALTIME ELAPSED TIME COMPONENT
 *
 * Component con hi·ªÉn th·ªã th·ªùi gian ƒë√£ s·∫°c v·ªõi c·∫≠p nh·∫≠t realtime
 * Logic ho·∫°t ƒë·ªông:
 * 1. N·∫øu c√≥ startTime: T·ª± ƒë·ªông t√≠nh to√°n th·ªùi gian t·ª´ startTime ƒë·∫øn hi·ªán t·∫°i (ho·∫∑c endTime)
 * 2. N·∫øu kh√¥ng c√≥ startTime: D√πng gi√° tr·ªã timeElapsed t·ª´ backend (static value)
 * 3. C·∫≠p nh·∫≠t m·ªói gi√¢y b·∫±ng setInterval
 *
 * X·ª≠ l√Ω edge cases:
 * - Phi√™n s·∫°c ƒë√£ k·∫øt th√∫c (c√≥ endTime): t√≠nh t·ª´ startTime ƒë·∫øn endTime
 * - Phi√™n s·∫°c ƒëang ch·∫°y (kh√¥ng c√≥ endTime): t√≠nh t·ª´ startTime ƒë·∫øn hi·ªán t·∫°i
 * - Kh√¥ng c√≥ startTime: hi·ªÉn th·ªã gi√° tr·ªã fallback t·ª´ backend
 * - Component unmount: cleanup interval ƒë·ªÉ tr√°nh memory leak
 */
const RealtimeElapsedTime = ({ sessionData }) => {
  /**
   * State: display
   * - L∆∞u chu·ªói th·ªùi gian ƒë·ªÉ hi·ªÉn th·ªã (format: "MM:SS" ho·∫∑c "HH:MM:SS")
   * - Kh·ªüi t·∫°o t·ª´ sessionData.timeElapsed n·∫øu c√≥, kh√¥ng th√¨ "00:00"
   * - useState v·ªõi function initializer ƒë·ªÉ ch·ªâ ch·∫°y 1 l·∫ßn khi mount
   */
  const [display, setDisplay] = useState(
    () => sessionData.timeElapsed || "00:00"
  );

  useEffect(() => {
    /**
     * Flag mounted
     * - D√πng ƒë·ªÉ ki·ªÉm tra component c√≤n mounted hay kh√¥ng
     * - Tr√°nh warning "Can't perform a React state update on an unmounted component"
     * - Khi component unmount, set mounted = false ƒë·ªÉ kh√¥ng setState n·ªØa
     */
    let mounted = true;

    /**
     * Format s·ªë gi√¢y th√†nh chu·ªói th·ªùi gian
     * Logic:
     * - T√≠nh hours = totalSec / 3600 (1 gi·ªù = 3600 gi√¢y)
     * - T√≠nh minutes = (totalSec % 3600) / 60 (ph·∫ßn d∆∞ sau khi l·∫•y gi·ªù, chia cho 60)
     * - T√≠nh seconds = totalSec % 60 (ph·∫ßn d∆∞ sau khi l·∫•y ph√∫t)
     * - N·∫øu c√≥ gi·ªù: return "HH:MM:SS"
     * - N·∫øu kh√¥ng c√≥ gi·ªù: return "MM:SS"
     * - padStart(2, "0"): th√™m s·ªë 0 ƒë·∫±ng tr∆∞·ªõc n·∫øu ch·ªâ c√≥ 1 ch·ªØ s·ªë (v√≠ d·ª•: 5 -> "05")
     */
    function formatDurationSeconds(totalSec) {
      const hours = Math.floor(totalSec / 3600); // L√†m tr√≤n xu·ªëng ƒë·ªÉ l·∫•y s·ªë gi·ªù nguy√™n
      const minutes = Math.floor((totalSec % 3600) / 60); // L·∫•y ph·∫ßn d∆∞ gi·ªù, chia 60 ƒë·ªÉ ra ph√∫t
      const seconds = Math.floor(totalSec % 60); // L·∫•y ph·∫ßn d∆∞ ph√∫t ƒë·ªÉ ra gi√¢y

      if (hours > 0) {
        // Tr∆∞·ªùng h·ª£p c√≥ gi·ªù: format "HH:MM:SS"
        // Note: C√≥ \n trong string nh∆∞ng ngay sau ƒë√≥ replace th√†nh "" (c√≥ th·ªÉ l√† code c≈©)
        return `${String(hours).padStart(2, "0")}:${String(minutes).padStart(
          2,
          "0"
        )}:${String(seconds).padStart(2, "0")}`;
      }

      // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ gi·ªù: ch·ªâ format "MM:SS"
      return `${String(minutes).padStart(2, "0")}:${String(seconds).padStart(
        2,
        "0"
      )}`;
    }

    /**
     * Function update - T√≠nh to√°n v√† c·∫≠p nh·∫≠t th·ªùi gian hi·ªÉn th·ªã
     * ƒê∆∞·ª£c g·ªçi:
     * 1. Ngay l·∫≠p t·ª©c khi component mount
     * 2. M·ªói gi√¢y b·ªüi setInterval
     *
     * Flow:
     * 1. Parse startTime v√† endTime t·ª´ sessionData
     * 2. N·∫øu kh√¥ng c√≥ startTime -> d√πng fallback timeElapsed
     * 3. N·∫øu c√≥ startTime -> t√≠nh diff gi·ªØa (endTime ho·∫∑c now) v√† startTime
     * 4. Format diff th√†nh chu·ªói v√† setState
     */
    function update() {
      try {
        // Parse startTime t·ª´ string ISO sang Date object
        // V√≠ d·ª•: "2025-10-27T10:30:00Z" -> Date object
        const start = sessionData?.startTime
          ? new Date(sessionData.startTime)
          : null;

        // Parse endTime n·∫øu c√≥ (phi√™n s·∫°c ƒë√£ k·∫øt th√∫c)
        const end = sessionData?.endTime ? new Date(sessionData.endTime) : null;

        // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ startTime
        if (!start) {
          // D√πng gi√° tr·ªã timeElapsed ƒë√£ ƒë∆∞·ª£c backend t√≠nh s·∫µn
          // Ho·∫∑c "00:00" n·∫øu c·∫£ timeElapsed c≈©ng kh√¥ng c√≥
          setDisplay(sessionData.timeElapsed || "00:00");
          return;
        }

        // X√°c ƒë·ªãnh th·ªùi ƒëi·ªÉm k·∫øt th√∫c ƒë·ªÉ t√≠nh diff
        // - N·∫øu c√≥ endTime (phi√™n ƒë√£ k·∫øt th√∫c): d√πng endTime
        // - N·∫øu kh√¥ng c√≥ endTime (phi√™n ƒëang ch·∫°y): d√πng th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
        const now = end ? end : new Date();

        // T√≠nh ch√™nh l·ªách th·ªùi gian b·∫±ng milliseconds, sau ƒë√≥ chia 1000 ƒë·ªÉ ra gi√¢y
        // getTime() tr·∫£ v·ªÅ timestamp (milliseconds since 1970-01-01)
        // Math.max(0, ...) ƒë·∫£m b·∫£o kh√¥ng bao gi·ªù √¢m (tr∆∞·ªùng h·ª£p startTime > now)
        const diffSec = Math.max(
          0,
          Math.floor((now.getTime() - start.getTime()) / 1000)
        );

        // Format s·ªë gi√¢y th√†nh chu·ªói "MM:SS" ho·∫∑c "HH:MM:SS"
        const formatted = formatDurationSeconds(diffSec);

        // Ch·ªâ setState khi component c√≤n mounted
        // Tr√°nh warning khi interval v·∫´n ch·∫°y sau khi component unmount
        if (mounted) setDisplay(formatted);
      } catch (e) {
        // X·ª≠ l√Ω l·ªói (v√≠ d·ª•: startTime kh√¥ng ƒë√∫ng format, new Date() throw error)
        // Fallback v·ªÅ gi√° tr·ªã timeElapsed t·ª´ backend ho·∫∑c "00:00"
        if (mounted) setDisplay(sessionData.timeElapsed || "00:00");
      }
    }

    // G·ªçi update() ngay l·∫ßn ƒë·∫ßu ti√™n ƒë·ªÉ kh√¥ng ph·∫£i ƒë·ª£i 1 gi√¢y
    update();

    // T·∫°o interval ƒë·ªÉ g·ªçi update() m·ªói 1000ms = 1 gi√¢y
    // L∆∞u interval ID ƒë·ªÉ c√≥ th·ªÉ clear khi cleanup
    const id = setInterval(update, 1000);

    /**
     * Cleanup function
     * - ƒê∆∞·ª£c g·ªçi khi:
     *   1. Component unmount
     *   2. Dependencies thay ƒë·ªïi (startTime, endTime, timeElapsed thay ƒë·ªïi)
     * - Set mounted = false ƒë·ªÉ d·ª´ng setState
     * - clearInterval ƒë·ªÉ d·ª´ng timer, tr√°nh memory leak
     */
    return () => {
      mounted = false; // ƒê√°nh d·∫•u component ƒë√£ unmount
      clearInterval(id); // H·ªßy interval
    };
  }, [
    // Dependencies c·ªßa useEffect
    // Khi b·∫•t k·ª≥ gi√° tr·ªã n√†o trong m·∫£ng n√†y thay ƒë·ªïi, effect s·∫Ω ch·∫°y l·∫°i
    sessionData?.startTime, // Th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu thay ƒë·ªïi
    sessionData?.endTime, // Th·ªùi ƒëi·ªÉm k·∫øt th√∫c thay ƒë·ªïi (khi phi√™n k·∫øt th√∫c)
    sessionData?.timeElapsed, // Gi√° tr·ªã fallback thay ƒë·ªïi
  ]);

  /**
   * Render component
   * - D√πng Ant Design Statistic ƒë·ªÉ hi·ªÉn th·ªã ƒë·ªìng b·ªô v·ªõi Card "NƒÉng l∆∞·ª£ng ƒë√£ s·∫°c"
   * - title: nh√£n "Th·ªùi gian ƒë√£ s·∫°c"
   * - value: chu·ªói th·ªùi gian t·ª´ state display (c·∫≠p nh·∫≠t m·ªói gi√¢y)
   * - valueStyle: style gi·ªëng h·ªát Card nƒÉng l∆∞·ª£ng ƒë·ªÉ UI ƒë·ªìng nh·∫•t
   */
  return (
    <Statistic
      title="Th·ªùi gian ƒë√£ s·∫°c"
      value={display} // Gi√° tr·ªã ƒë·ªông, c·∫≠p nh·∫≠t m·ªói gi√¢y
      valueStyle={{
        fontSize: "36px", // S·ªë to ƒë·ªÉ d·ªÖ ƒë·ªçc
        fontWeight: 700, // Font ƒë·∫≠m
        color: "#1a1a1a", // M√†u ƒëen
      }}
    />
  );
};
