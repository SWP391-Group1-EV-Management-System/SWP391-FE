import React, { useEffect } from 'react';
import { 
  Modal, 
  Form, 
  Input, 
  InputNumber, 
  Select, 
  Typography,
  Space,
  Row,
  Col
} from 'antd';
import { 
  EditOutlined, 
  PlusOutlined,
  GiftOutlined, // Thay th·∫ø PackageOutlined
  DollarOutlined,
  ClockCircleOutlined,
  TagOutlined
} from '@ant-design/icons';

const { TextArea } = Input;
const { Option } = Select;
const { Title } = Typography;

/**
 * Component form ƒë·ªÉ th√™m/s·ª≠a g√≥i d·ªãch v·ª•
 * S·ª≠ d·ª•ng Ant Design Form v√† Modal
 */
const ServicePackageForm = ({ 
  isOpen = false, 
  initialData = null, 
  onSubmit, 
  onCancel,
  mode = 'add',
  loading = false
}) => {
  
  const [form] = Form.useForm();

  // Reset form khi m·ªü/ƒë√≥ng ho·∫∑c thay ƒë·ªïi data
  useEffect(() => {
    if (isOpen) {
      if (initialData && mode === 'edit') {
        // Edit mode - ƒëi·ªÅn d·ªØ li·ªáu c≈©
        form.setFieldsValue(initialData);
      } else {
        // Add mode - reset form v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
        form.resetFields();
      }
    }
  }, [isOpen, initialData, mode, form]);

  /**
   * X·ª≠ l√Ω submit form
   */
  const handleSubmit = async () => {
    try {
      const values = await form.validateFields();
      const submitData = {
        ...values,
        id: initialData?.id || Date.now() // T·∫°o ID t·∫°m th·ªùi cho demo
      };

      console.log(`üìù ${mode === 'edit' ? 'Update' : 'Create'} package:`, submitData);
      
      if (onSubmit) {
        await onSubmit(submitData);
      }
    } catch (error) {
      console.error('Form validation failed:', error);
    }
  };

  /**
   * X·ª≠ l√Ω cancel
   */
  const handleCancel = () => {
    form.resetFields();
    if (onCancel) {
      onCancel();
    }
  };

  /**
   * Rules validation
   */
  const validationRules = {
    name: [
      { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n g√≥i d·ªãch v·ª•' },
      { min: 3, message: 'T√™n g√≥i ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±' },
      { max: 100, message: 'T√™n g√≥i kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±' }
    ],
    description: [
      { required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£' },
      { min: 10, message: 'M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±' }
    ],
    price: [
      { required: true, message: 'Vui l√≤ng nh·∫≠p gi√°' },
      { type: 'number', min: 0, message: 'Gi√° ph·∫£i l√† s·ªë d∆∞∆°ng' }
    ],
    duration: [
      { required: true, message: 'Vui l√≤ng nh·∫≠p th·ªùi h·∫°n' }
    ],
    type: [
      { required: true, message: 'Vui l√≤ng ch·ªçn lo·∫°i g√≥i' }
    ]
  };

  return (
    <Modal
      title={
        <Space>
          {mode === 'edit' ? <EditOutlined /> : <PlusOutlined />}
          <Title level={4} style={{ margin: 0 }}>
            {mode === 'edit' ? 'Ch·ªânh s·ª≠a g√≥i d·ªãch v·ª•' : 'Th√™m g√≥i d·ªãch v·ª• m·ªõi'}
          </Title>
        </Space>
      }
      open={isOpen}
      onOk={handleSubmit}
      onCancel={handleCancel}
      okText={mode === 'edit' ? 'C·∫≠p nh·∫≠t' : 'Th√™m m·ªõi'}
      cancelText="H·ªßy"
      confirmLoading={loading}
      width={600}
      destroyOnHidden={true} // Fixed: Changed from destroyOnClose
      maskClosable={false}
      okButtonProps={{
        size: 'large',
        style: { borderRadius: '6px' }
      }}
      cancelButtonProps={{
        size: 'large',
        style: { borderRadius: '6px' }
      }}
    >
      <Form
        form={form}
        layout="vertical"
        initialValues={{
          type: 'Prepaid'
        }}
        autoComplete="off"
        style={{ marginTop: '20px' }}
      >
        {/* T√™n g√≥i */}
        <Form.Item
          name="name"
          label="T√™n g√≥i d·ªãch v·ª•"
          rules={validationRules.name}
        >
          <Input
            placeholder="VD: G√≥i Premium, G√≥i Standard..."
            prefix={<GiftOutlined style={{ color: '#1890ff' }} />}
            size="large"
            style={{ borderRadius: '6px' }}
          />
        </Form.Item>

        {/* M√¥ t·∫£ */}
        <Form.Item
          name="description"
          label="M√¥ t·∫£ chi ti·∫øt"
          rules={validationRules.description}
        >
          <TextArea
            rows={4}
            placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ g√≥i d·ªãch v·ª•..."
            showCount
            maxLength={500}
            style={{ borderRadius: '6px' }}
          />
        </Form.Item>

        {/* Gi√° v√† Lo·∫°i g√≥i */}
        <Row gutter={16}>
          <Col span={12}>
            <Form.Item
              name="price"
              label="Gi√° (VNƒê)"
              rules={validationRules.price}
            >
              <InputNumber
                style={{ width: '100%', borderRadius: '6px' }}
                placeholder="Nh·∫≠p gi√°"
                prefix={<DollarOutlined />}
                formatter={value => `${value}`.replace(/\B(?=(\d{3})+(?!\d))/g, ',')}
                parser={value => value.replace(/\$\s?|(,*)/g, '')}
                min={0}
                size="large"
              />
            </Form.Item>
          </Col>

          <Col span={12}>
            <Form.Item
              name="type"
              label="Lo·∫°i g√≥i"
              rules={validationRules.type}
            >
              <Select
                placeholder="Ch·ªçn lo·∫°i g√≥i"
                size="large"
                style={{ borderRadius: '6px' }}
                suffixIcon={<TagOutlined />}
              >
                <Option value="Prepaid">
                  <Space>
                    üîµ Prepaid
                  </Space>
                </Option>
                <Option value="VIP">
                  <Space>
                    üëë VIP
                  </Space>
                </Option>
                <Option value="Postpaid">
                  <Space>
                    üîí Postpaid
                  </Space>
                </Option>
              </Select>
            </Form.Item>
          </Col>
        </Row>

        {/* Th·ªùi h·∫°n */}
        <Form.Item
          name="duration"
          label="Th·ªùi h·∫°n s·ª≠ d·ª•ng"
          rules={validationRules.duration}
        >
          <Input
            placeholder="VD: 30 ng√†y, 90 ng√†y, 1 nƒÉm..."
            prefix={<ClockCircleOutlined style={{ color: '#1890ff' }} />}
            size="large"
            style={{ borderRadius: '6px' }}
          />
        </Form.Item>
      </Form>
    </Modal>
  );
};

export default ServicePackageForm;