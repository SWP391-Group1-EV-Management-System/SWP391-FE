/**
 * Th√†nh ph·∫ßn b·∫£n ƒë·ªì tr·∫°m s·∫°c xe ƒëi·ªán
 * 
 * T√≠nh nƒÉng:
 * - Hi·ªÉn th·ªã tr·∫°m s·∫°c tr√™n OpenStreetMap v·ªõi Leaflet
 * - Markers ƒë·ªông theo tr·∫°ng th√°i (available/busy/maintenance)
 * - Popup chi ti·∫øt tr·∫°m s·∫°c
 * - N√∫t ƒë·ªãnh v·ªã ng∆∞·ªùi d√πng
 * - Loading & error handling
 */

import React, { useEffect } from "react";
import { MapContainer, TileLayer, Marker, Popup, useMap, useMapEvents } from "react-leaflet";
import L from "leaflet";
import { useChargingStations } from "../../hooks/useChargingStations.js";
import "../../assets/styles/LeafletMap.css";
import "../../assets/styles/Map.css";
import "../../assets/styles/utilities.css";

// ==================== H·∫∞NG S·ªê ====================

const DEFAULT_CENTER = [10.7769, 106.7009]; // T·ªça ƒë·ªô trung t√¢m TP.HCM
const DEFAULT_ZOOM = 13; // M·ª©c zoom m·∫∑c ƒë·ªãnh
const LOCATE_ZOOM = 16; // M·ª©c zoom khi ƒë·ªãnh v·ªã ng∆∞·ªùi d√πng

const STATION_STATUS = {
  AVAILABLE: "available",
  BUSY: "busy",
  MAINTENANCE: "maintenance"
};

const STATUS_COLORS = {
  [STATION_STATUS.AVAILABLE]: "#52c41a",
  [STATION_STATUS.BUSY]: "#ff4d4f",
  [STATION_STATUS.MAINTENANCE]: "#faad14"
};

const STATUS_LABELS = {
  [STATION_STATUS.AVAILABLE]: "C√≤n tr·ªëng",
  [STATION_STATUS.BUSY]: "ƒêang s·ª≠ d·ª•ng",
  [STATION_STATUS.MAINTENANCE]: "B·∫£o tr√¨"
};

// ==================== ICON SETUP ====================

// Fix icon marker m·∫∑c ƒë·ªãnh c·ªßa Leaflet khi d√πng v·ªõi Vite/Webpack
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png",
  iconUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png",
  shadowUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png"
});

// ==================== UTILITIES ====================

/**
 * T·∫°o icon tr·∫°m s·∫°c theo tr·∫°ng th√°i
 */
const createStationIcon = (status) => {
  const color = STATUS_COLORS[status] || STATUS_COLORS[STATION_STATUS.MAINTENANCE];
  
  const svgIcon = `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="32" height="32">
      <circle cx="12" cy="12" r="10" fill="${color}" stroke="#fff" stroke-width="2"/>
      <path d="M8 6h3l-4 7h3l-2 5" fill="#fff" stroke="#fff" stroke-width="1"/>
    </svg>
  `;

  return new L.Icon({
    iconUrl: `data:image/svg+xml;base64,${btoa(svgIcon)}`,
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32]
  });
};

/**
 * L·∫•y text tr·∫°ng th√°i ti·∫øng Vi·ªát
 */
const getStatusText = (status) => STATUS_LABELS[status] || "Kh√¥ng x√°c ƒë·ªãnh";

// ==================== COMPONENTS ====================

/**
 * N√∫t ƒë·ªãnh v·ªã ng∆∞·ªùi d√πng (s·ª≠ d·ª•ng Leaflet native API)
 */
function LocateControl() {
  const map = useMap();

  useMapEvents({
    locationfound(e) {
      const marker = L.marker(e.latlng).addTo(map);
      const coords = `${e.latlng.lat.toFixed(6)}, ${e.latlng.lng.toFixed(6)}`;
      marker
        .bindPopup(`<b>üìç V·ªã tr√≠ c·ªßa b·∫°n</b><br/>T·ªça ƒë·ªô: ${coords}`)
        .openPopup();
      map.setView(e.latlng, LOCATE_ZOOM);
    },
    locationerror(e) {
      L.popup()
        .setLatLng(map.getCenter())
        .setContent(`Kh√¥ng th·ªÉ l·∫•y v·ªã tr√≠: ${e.message}`)
        .openOn(map);
    }
  });

  useEffect(() => {
    const locateBtn = L.control({ position: "bottomleft" });
    
    locateBtn.onAdd = function() {
      const btn = L.DomUtil.create("button", "leaflet-bar leaflet-control leaflet-control-custom");
      btn.innerHTML = "üìç";
      btn.title = "V·ªÅ v·ªã tr√≠ c·ªßa t√¥i";
      Object.assign(btn.style, {
        background: "#1890ff",
        color: "#fff",
        width: "40px",
        height: "40px",
        border: "none",
        borderRadius: "50%",
        fontSize: "22px",
        boxShadow: "0 4px 12px rgba(24, 144, 255, 0.3)",
        cursor: "pointer"
      });
      btn.onclick = () => map.locate({ setView: true, maxZoom: LOCATE_ZOOM, enableHighAccuracy: true });
      return btn;
    };
    
    locateBtn.addTo(map);
    return () => locateBtn.remove();
  }, [map]);

  return null;
}

/**
 * Popup th√¥ng tin tr·∫°m s·∫°c
 */
function StationPopupContent({ station, onStationClick }) {
  return (
    <div className="map-station-popup">
      <h4>‚ö° {station.name}</h4>
      <p className="station-address">üìç {station.address}</p>
      
      <div className="station-status-row">
        <span className={`station-status-badge ${station.status}`}>
          {getStatusText(station.status)}
        </span>
        <span className="station-slots-info">
          {station.availableSlots}/{station.totalSlots} tr·ªëng
        </span>
      </div>
      
      <div className="station-info-row">
        <span><strong>C√¥ng su·∫•t:</strong> {station.power}</span>
        <span><strong>Lo·∫°i:</strong> {station.type}</span>
      </div>
      
      {onStationClick && (
        <button
          className="ant-btn ant-btn-default ant-btn-sm"
          style={{ marginTop: "4px", width: "100%" }}
          onClick={() => onStationClick(station)}
        >
          üìã Xem chi ti·∫øt
        </button>
      )}
    </div>
  );
}

// ==================== MAIN COMPONENT ====================

/**
 * Component b·∫£n ƒë·ªì tr·∫°m s·∫°c
 * 
 * @param {Function} onStationClick - Callback khi click "Xem chi ti·∫øt"
 */
function Map({ onStationClick }) {
  const { stations, loading, error } = useChargingStations({ autoFetch: true });

  // L·ªçc ch·ªâ c√°c tr·∫°m c√≥ t·ªça ƒë·ªô h·ª£p l·ªá
  const validStations = stations.filter(s => s.lat && s.lng);

  return (
    <div className="map-wrapper">
      <MapContainer
        center={DEFAULT_CENTER}
        zoom={DEFAULT_ZOOM}
        className="map-container"
      >
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
        
        <LocateControl />
        
        {validStations.map((station) => (
          <Marker
            key={station.id}
            position={[station.lat, station.lng]}
            icon={createStationIcon(station.status)}
          >
            <Popup>
              <StationPopupContent 
                station={station} 
                onStationClick={onStationClick} 
              />
            </Popup>
          </Marker>
        ))}
      </MapContainer>

      {loading && (
        <div className="map-loading-overlay">
          ƒêang t·∫£i tr·∫°m s·∫°c...
        </div>
      )}
      
      {error && (
        <div className="map-error-notification">
          L·ªói: {error}
        </div>
      )}
    </div>
  );
}

export default Map;